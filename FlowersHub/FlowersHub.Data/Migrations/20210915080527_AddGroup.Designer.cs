// <auto-generated />
using FlowersHub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FlowersHub.Data.Migrations
{
    [DbContext(typeof(FlowersHubContext))]
    [Migration("20210915080527_AddGroup")]
    partial class AddGroup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ColorTypeFlower", b =>
                {
                    b.Property<string>("ColorsName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FlowersUrl")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ColorsName", "FlowersUrl");

                    b.HasIndex("FlowersUrl");

                    b.ToTable("ColorTypeFlower");
                });

            modelBuilder.Entity("FlowerFlowerType", b =>
                {
                    b.Property<string>("FlowerTypesName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FlowersUrl")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FlowerTypesName", "FlowersUrl");

                    b.HasIndex("FlowersUrl");

                    b.ToTable("FlowerFlowerType");
                });

            modelBuilder.Entity("FlowersHub.Model.ColorType", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Variations")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("FlowersHub.Model.Flower", b =>
                {
                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Updater")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Url");

                    b.ToTable("Flowers");
                });

            modelBuilder.Entity("FlowersHub.Model.FlowerType", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Variations")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("FlowerTypes");
                });

            modelBuilder.Entity("ColorTypeFlower", b =>
                {
                    b.HasOne("FlowersHub.Model.ColorType", null)
                        .WithMany()
                        .HasForeignKey("ColorsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowersHub.Model.Flower", null)
                        .WithMany()
                        .HasForeignKey("FlowersUrl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlowerFlowerType", b =>
                {
                    b.HasOne("FlowersHub.Model.FlowerType", null)
                        .WithMany()
                        .HasForeignKey("FlowerTypesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowersHub.Model.Flower", null)
                        .WithMany()
                        .HasForeignKey("FlowersUrl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
